{"messages": [{"role": "system", "content": "you are a Python coding assistant proficient in the ifcopenshell module."}, {"role": "user", "content": "Get GlobalId of a storey."}, {"role": "assistant", "content": "# Get GlobalId of a storey\nimport ifcopenshell\nimport ifcopenshell.util.selector\nmodel = ifcopenshell.open(\"model.ifc\")\nbuilding_storey = model.by_type('IfcBuildingStorey')[0]\nprint(building_storey.GlobalId)"}]}
{"messages": [{"role": "system", "content": "you are a Python coding assistant proficient in the ifcopenshell module."}, {"role": "user", "content": "Get a description of the space function"}, {"role": "assistant", "content": "# Get a description of the space function\nimport ifcopenshell\nimport ifcopenshell.util.selector\nmodel = ifcopenshell.open(\"model.ifc\")\nspace=model.by_type('IfcSpace')[0]\n\nprint(ifcopenshell.util.selector.get_element_value(space, \"type.Name\"))"}]}
{"messages": [{"role": "system", "content": "you are a Python coding assistant proficient in the ifcopenshell module."}, {"role": "user", "content": "get the BuildingStorey Value on each of my spaces."}, {"role": "assistant", "content": "# get the BuildingStorey Value on each of my spaces.\nimport ifcopenshell\nimport ifcopenshell.util.selector\nmodel = ifcopenshell.open(\"model.ifc\")\nspaces=model.by_type('IfcSpace')\nfor space in spaces:\n    print('Room',space.Name,' is at floor:',space.Decomposes[0][4][2])"}]}
{"messages": [{"role": "system", "content": "you are a Python coding assistant proficient in the ifcopenshell module."}, {"role": "user", "content": "select elements from ifc model."}, {"role": "assistant", "content": "# select elements from ifc model\nimport ifcopenshell\nimport ifcopenshell.util.selector\nmodel = ifcopenshell.open(\"model.ifc\")\n# Select all walls in the file.\n\nelements = ifcopenshell.util.selector.filter_elements(model, \"IfcWall, IfcSlab\")\n\n# Add doors to the elements too.\nelements = ifcopenshell.util.selector.filter_elements(model, \"IfcDoor\", elements)\n\n# Changed our mind, exclude the slabs.\nelements = ifcopenshell.util.selector.filter_elements(model, \"! IfcSlab\", elements)\n\n# {#1=IfcWall(...), #2=IfcDoor(...)}\nprint(elements)"}]}
{"messages": [{"role": "system", "content": "you are a Python coding assistant proficient in the ifcopenshell module."}, {"role": "user", "content": "get the area of a space."}, {"role": "assistant", "content": "# get the area of a space\nimport ifcopenshell\nmodel = ifcopenshell.open(\"model.ifc\")\nspace = model.by_type('IfcSpace')[2]\nimport ifcopenshell.util.placement\nspace_area=ifcopenshell.util.placement.get_local_placement(space.ObjectPlacement)[2,3]#get the area of a space"}]}
{"messages": [{"role": "system", "content": "you are a Python coding assistant proficient in the ifcopenshell module."}, {"role": "user", "content": "Get the distribution system of an element"}, {"role": "assistant", "content": "#Get the distribution system of an element\nimport ifcopenshell\npipe = model.by_type(\"IfcPipeSegment\")[0]\n# Elements may be assigned to multiple systems simultaneously, such as electrical, hydraulic, etc\nsystems = ifcopenshell.util.system.get_element_systems(pipe)\nfor system in systems:\n  # For example, it might be part of a Chilled Water system\n  print(\"This pipe is part of the system\", system.Name)"}]}
{"messages": [{"role": "system", "content": "you are a Python coding assistant proficient in the ifcopenshell module."}, {"role": "user", "content": "Convert to and from SI units and project units."}, {"role": "assistant", "content": "#Convert to and from SI units and project units\nimport ifcopenshell\nimport ifcopenshell.util.unit\nmodel = ifcopenshell.open(\"model.ifc\")\n# Note: ifc_project_length is a value you have extracted from the project,\n# just as from a quantity set.\nunit_scale = ifcopenshell.util.unit.calculate_unit_scale(model)\n# Convert to SI unit:\nsi_meters = ifc_project_length * unit_scale\n# Convert from SI unit:\nifc_project_length = si_meters / unit_scale"}]}
{"messages": [{"role": "system", "content": "you are a Python coding assistant proficient in the ifcopenshell module."}, {"role": "user", "content": "Get all elements in a container."}, {"role": "assistant", "content": "#Get all elements in a container\nimport ifcopenshell.util.element\n\nfor storey in model.by_type(\"IfcBuildingStorey\"):\n  elements = ifcopenshell.util.element.get_decomposition(storey)\n  print(f\"There are {len(elements)} located on storey {storey.Name}, they are:\")\n  for element in elements:\n    print(element.Name)"}]}
{"messages": [{"role": "system", "content": "you are a Python coding assistant proficient in the ifcopenshell module."}, {"role": "user", "content": "Get the properties of a wall type."}, {"role": "assistant", "content": "#Get the properties of a wall type\nimport ifcopenshell.util.element\n\nwall = model.by_type(\"IfcWall\")[0]\nwall_type = ifcopenshell.util.element.get_type(wall)\n\n# Get all properties and quantities as a dictionary\n# returns {\"Pset_WallCommon\": {\"id\": 123, \"FireRating\": \"2HR\", ...}}\npsets = ifcopenshell.util.element.get_psets(wall_type)\nprint(psets)\n\n# Get all properties and quantities of the wall, including inherited type properties\npsets = ifcopenshell.util.element.get_psets(wall)\nprint(psets)\n\n# Get only properties and not quantities\nprint(ifcopenshell.util.element.get_psets(wall, psets_only=True))\n\n# Get only quantities and not properties\nprint(ifcopenshell.util.element.get_psets(wall, qtos_only=True))"}]}
{"messages": [{"role": "system", "content": "you are a Python coding assistant proficient in the ifcopenshell module."}, {"role": "user", "content": "Get all door occurrences of a type."}, {"role": "assistant", "content": "#Get all door occurrences of a type\nimport ifcopenshell\nimport ifcopenshell.util.element\nmodel = ifcopenshell.open(\"model.ifc\")\n\nfor door_type in model.by_type(\"IfcDoorType\"):\n  print(\"The door type is\", door_type.Name)\n  doors = ifcopenshell.util.element.get_types(door_type)\n  print(f\"There are {len(doors)} of this type\")\n  for door in doors:\n    print(\"The door name is\", door.Name)"}]}